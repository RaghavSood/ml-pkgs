# langchain/default.nix generated by extract-langchain-deps.nix

{ lib
, buildPythonPackage
, fetchFromGitHub
, poetry-core
, pydantic
, sqlalchemy
, requests
, pyyaml
, numpy
, openapi-schema-pydantic
, dataclasses-json
, tenacity
, aiohttp
, async-timeout
, numexpr
, langchainplus-sdk
, tqdm
, faiss
, nltk
, beautifulsoup4
, jinja2
, openai
, html2text
, pexpect
, jq
, lxml
, pandas
, chardet
, requests-toolbelt
, azure-core
, azure-identity
, azure-cosmos
, elasticsearch
, wolframalpha
, nlpcloud
, pyowm
, atlassian-python-api
, telethon
, opensearch-py
, google-api-python-client
, duckduckgo-search
, redis
, pymongo
, psycopg2
, neo4j
, manifest-ml
, anthropic
, cohere
, steamship
, spacy
, google-auth
, networkx
, gptcache
, pytesseract
, lark
, gql
, bibtexparser
, pyspark
, esprima
, streamlit
, transformers
, pytorch
, tiktoken
, huggingface-hub
, sentence-transformers
, scikit-learn
, pinecone-client
, weaviate-client
, qdrant-client
, pypdf
, pdfminer-six
, pymupdf
}:

buildPythonPackage rec {
  pname = "langchain";
  version = "0.0.221";

  src = fetchFromGitHub {
    owner = "hwchase17";
    repo = "langchain";
    rev = "v${version}";
    hash = "sha256-1L9BMZFAF3oLeSEfdQiVNU+q8L1WQQ7ZQbNf0qFwFZQ=";
  };

  format = "pyproject";

  buildInputs = [
    poetry-core
  ];

  propagatedBuildInputs = let
    core = [
      pydantic
      sqlalchemy
      requests
      pyyaml
      numpy
      openapi-schema-pydantic
      dataclasses-json
      tenacity
      aiohttp
      async-timeout
      numexpr
      langchainplus-sdk
      
    ];
    
    core-utils = [
      tqdm
      (faiss.override { cudaSupport = false; })
      nltk
      beautifulsoup4
      jinja2
      openai
      html2text
      pexpect
      jq
      lxml
      pandas
      chardet
      requests-toolbelt
      
    ];

  in core ++ core-utils;

  passthru.optional-dependencies = {
    
    azure = [
      azure-core
      azure-identity
      azure-cosmos
      
    ];
    
    extended-apis = [
      elasticsearch
      wolframalpha
      nlpcloud
      pyowm
      atlassian-python-api
      telethon
      
    ];
    
    search = [
      opensearch-py
      google-api-python-client
      duckduckgo-search
      
    ];
    
    db = [
      redis
      pymongo
      psycopg2
      neo4j
      
    ];
    
    model-apis = [
      manifest-ml
      anthropic
      cohere
      steamship
      
    ];
    
    utils = [
      spacy
      google-auth
      networkx
      gptcache
      pytesseract
      lark
      gql
      bibtexparser
      pyspark
      esprima
      streamlit
      
    ];
    
    models = [
      transformers
      pytorch
      tiktoken
      huggingface-hub
      sentence-transformers
      scikit-learn
      
    ];
    
    vector-store-apis = [
      pinecone-client
      weaviate-client
      qdrant-client
      
    ];
    
    pdf = [
      pypdf
      pdfminer-six
      pymupdf
      
    ];
    
  };

  pythonImportsCheck = [
    "langchain"
  ];

  meta = with lib; {
    description = ''
      Building applications with LLMs through composability
    '';
    homepage = "https://docs.langchain.com/docs/";
    license = licenses.mit;
    maintainers = with maintainers; [ breakds ];
  };
}
